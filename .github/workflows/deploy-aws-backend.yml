name: Deploy Fashion Backend to AWS

on:
  push:
    branches: [main, production]
    paths: ['server/**']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Validate Required Secrets
        run: |
          echo "🔍 Validating required secrets..."
          
          missing_secrets=()
          
          # Check core required secrets
          [ -z "${{ secrets.DATABASE }}" ] && missing_secrets+=("DATABASE")
          [ -z "${{ secrets.SECRET }}" ] && missing_secrets+=("SECRET")
          [ -z "${{ secrets.CLIENT_URL }}" ] && missing_secrets+=("CLIENT_URL")
          [ -z "${{ secrets.RAZORPAY_KEY_ID }}" ] && missing_secrets+=("RAZORPAY_KEY_ID")
          [ -z "${{ secrets.RAZORPAY_KEY_SECRET }}" ] && missing_secrets+=("RAZORPAY_KEY_SECRET")
          [ -z "${{ secrets.BREVO_API_KEY }}" ] && missing_secrets+=("BREVO_API_KEY")
          [ -z "${{ secrets.BREVO_SENDER_EMAIL }}" ] && missing_secrets+=("BREVO_SENDER_EMAIL")
          [ -z "${{ secrets.MSG91_AUTH_KEY }}" ] && missing_secrets+=("MSG91_AUTH_KEY")
          [ -z "${{ secrets.REDIS_URL }}" ] && missing_secrets+=("REDIS_URL")
          [ -z "${{ secrets.EC2_PRIVATE_KEY }}" ] && missing_secrets+=("EC2_PRIVATE_KEY")
          
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "❌ Missing required secrets:"
            printf '%s\n' "${missing_secrets[@]}"
            echo ""
            echo "💡 Add missing secrets in GitHub Settings → Secrets and variables → Actions"
            exit 1
          fi
          
          echo "✅ All required secrets validated"

      - name: Find Auto Scaling Group Instances
        id: get-instances
        run: |
          ASG_NAME="fashion-backend-production-asg"
          echo "🔍 Finding instances in Auto Scaling Group: $ASG_NAME"
          
          # Check if ASG exists
          if ! aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $ASG_NAME &>/dev/null; then
            echo "❌ Auto Scaling Group '$ASG_NAME' not found!"
            echo "💡 Run infrastructure setup first: ./aws/scripts/create-infrastructure.sh"
            exit 1
          fi
          
          # Get running instances
          INSTANCES=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names $ASG_NAME \
            --query 'AutoScalingGroups[0].Instances[?LifecycleState==`InService`].InstanceId' \
            --output text)
          
          if [ -z "$INSTANCES" ]; then
            echo "❌ No running instances found in Auto Scaling Group"
            exit 1
          fi
          
          echo "✅ Found instances: $INSTANCES"
          echo "instances=$INSTANCES" >> $GITHUB_OUTPUT

      - name: Deploy to EC2 Instances
        run: |
          echo "🚀 Starting deployment to all instances..."
          
          # Create SSH key file
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          
          # Track deployment results
          successful_deployments=0
          failed_deployments=0
          
          for instance_id in ${{ steps.get-instances.outputs.instances }}; do
            echo ""
            echo "📦 Deploying to instance: $instance_id"
            
            # Get instance IP
            INSTANCE_IP=$(aws ec2 describe-instances \
              --instance-ids $instance_id \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)
            
            if [ "$INSTANCE_IP" == "None" ] || [ -z "$INSTANCE_IP" ]; then
              echo "⚠️ No public IP for instance $instance_id - skipping"
              continue
            fi
            
            echo "🌐 Deploying to IP: $INSTANCE_IP"
            
            # Deploy application
            if ssh -i private_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=30 ec2-user@$INSTANCE_IP '
              set -e
              echo "🔧 Starting deployment on $(hostname)"
              
              # Navigate to app directory
              cd /opt/app
              
              # Stop current application
              echo "⏹️ Stopping current application..."
              pm2 delete all || true
              
              # Backup current version
              if [ -d "current" ]; then
                echo "📦 Backing up current version..."
                mv current backup-$(date +%Y%m%d-%H%M%S) || true
              fi
              
              # Clone latest code
              echo "⬇️ Cloning latest code..."
              git clone https://github.com/RahulXTmCoding/desi-otaku.git current
              cd current/server
              
              # Install dependencies
              echo "📚 Installing dependencies..."
              npm install --production --silent
              
              # Verify app.js exists
              if [ ! -f "app.js" ]; then
                echo "❌ app.js not found!"
                exit 1
              fi
              
              echo "✅ Application setup complete"
            '; then
              echo "✅ Application deployed to $instance_id"
              
              # Configure environment and start application
              if ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@$INSTANCE_IP "
                cd /opt/app/current/server
                
                # Create environment file
                echo 'NODE_ENV=production' > .env
                echo 'PORT=8000' >> .env
                echo 'DATABASE=${{ secrets.DATABASE }}' >> .env
                echo 'SECRET=${{ secrets.SECRET }}' >> .env
                echo 'CLIENT_URL=${{ secrets.CLIENT_URL }}' >> .env
                echo 'RAZORPAY_KEY_ID=${{ secrets.RAZORPAY_KEY_ID }}' >> .env
                echo 'RAZORPAY_KEY_SECRET=${{ secrets.RAZORPAY_KEY_SECRET }}' >> .env
                echo 'RAZORPAY_WEBHOOK_SECRET=${{ secrets.RAZORPAY_WEBHOOK_SECRET }}' >> .env
                echo 'BRAINTREE_MERCHANT_ID=${{ secrets.BRAINTREE_MERCHANT_ID }}' >> .env
                echo 'BRAINTREE_PUBLIC_KEY=${{ secrets.BRAINTREE_PUBLIC_KEY }}' >> .env
                echo 'BRAINTREE_PRIVATE_KEY=${{ secrets.BRAINTREE_PRIVATE_KEY }}' >> .env
                echo 'EMAIL_SERVICE=brevo' >> .env
                echo 'BREVO_API_KEY=${{ secrets.BREVO_API_KEY }}' >> .env
                echo 'BREVO_SENDER_EMAIL=${{ secrets.BREVO_SENDER_EMAIL }}' >> .env
                echo 'BREVO_SENDER_NAME=${{ secrets.BREVO_SENDER_NAME }}' >> .env
                echo 'MSG91_AUTH_KEY=${{ secrets.MSG91_AUTH_KEY }}' >> .env
                echo 'MSG91_SENDER_ID=${{ secrets.MSG91_SENDER_ID }}' >> .env
                echo 'MSG91_TEMPLATE_ID=${{ secrets.MSG91_TEMPLATE_ID }}' >> .env
                echo 'MSG91_ROUTE=${{ secrets.MSG91_ROUTE }}' >> .env
                echo 'SHIPROCKET_EMAIL=${{ secrets.SHIPROCKET_EMAIL }}' >> .env
                echo 'SHIPROCKET_PASSWORD=${{ secrets.SHIPROCKET_PASSWORD }}' >> .env
                echo 'SHIPROCKET_TEST_MODE=${{ secrets.SHIPROCKET_TEST_MODE }}' >> .env
                echo 'PICKUP_PINCODE=${{ secrets.PICKUP_PINCODE }}' >> .env
                echo 'PICKUP_NAME=${{ secrets.PICKUP_NAME }}' >> .env
                echo 'PICKUP_PHONE=${{ secrets.PICKUP_PHONE }}' >> .env
                echo 'GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}' >> .env
                echo 'GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}' >> .env
                echo 'FACEBOOK_APP_ID=${{ secrets.FACEBOOK_APP_ID }}' >> .env
                echo 'FACEBOOK_APP_SECRET=${{ secrets.FACEBOOK_APP_SECRET }}' >> .env
                echo 'REDIS_URL=${{ secrets.REDIS_URL }}' >> .env
                
                chmod 600 .env
                
                # Create PM2 ecosystem config
                cat > ecosystem.config.js << 'EOF'
                module.exports = {
                  apps: [{
                    name: 'fashion-backend',
                    script: './app.js',
                    instances: 1,
                    exec_mode: 'cluster',
                    env: {
                      NODE_ENV: 'production',
                      PORT: 8000
                    },
                    error_file: '/var/log/pm2/err.log',
                    out_file: '/var/log/pm2/out.log',
                    log_file: '/var/log/pm2/combined.log',
                    time: true,
                    watch: false,
                    max_memory_restart: '800M',
                    restart_delay: 4000,
                    max_restarts: 10,
                    min_uptime: '10s'
                  }]
                };
                EOF
                
                # Start application
                echo '🚀 Starting application with PM2...'
                pm2 start ecosystem.config.js
                pm2 save
                
                echo '✅ Application started successfully'
                pm2 list
              "; then
                echo "✅ Environment configured and application started on $instance_id"
                ((successful_deployments++))
              else
                echo "❌ Failed to configure environment on $instance_id"
                ((failed_deployments++))
              fi
            else
              echo "❌ Failed to deploy application to $instance_id"
              ((failed_deployments++))
            fi
          done
          
          # Clean up SSH key
          rm -f private_key.pem
          
          echo ""
          echo "📊 Deployment Summary:"
          echo "✅ Successful: $successful_deployments"
          echo "❌ Failed: $failed_deployments"
          
          if [ $failed_deployments -gt 0 ]; then
            echo "⚠️ Some deployments failed"
            exit 1
          fi
          
          echo "🎉 All deployments completed successfully!"

      - name: Health Check Applications
        run: |
          echo "🏥 Running health checks..."
          
          # Wait for applications to start
          echo "⏳ Waiting 30 seconds for applications to start..."
          sleep 30
          
          # Get Load Balancer DNS
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names fashion-backend-production-alb \
            --query 'LoadBalancers[0].DNSName' --output text 2>/dev/null || echo "")
          
          if [ -n "$ALB_DNS" ] && [ "$ALB_DNS" != "None" ]; then
            echo "🌐 Testing Load Balancer: http://$ALB_DNS"
            
            for attempt in {1..5}; do
              if curl -f -m 10 "http://$ALB_DNS/health" 2>/dev/null; then
                echo "✅ Load Balancer health check passed"
                echo "🌟 Backend is live at: http://$ALB_DNS"
                break
              else
                if [ $attempt -eq 5 ]; then
                  echo "❌ Load Balancer health check failed"
                else
                  echo "⚠️ Health check attempt $attempt failed, retrying in 10 seconds..."
                  sleep 10
                fi
              fi
            done
          fi
          
          # Test individual instances
          all_healthy=true
          
          for instance_id in ${{ steps.get-instances.outputs.instances }}; do
            INSTANCE_IP=$(aws ec2 describe-instances \
              --instance-ids $instance_id \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)
            
            if [ "$INSTANCE_IP" != "None" ] && [ -n "$INSTANCE_IP" ]; then
              echo "🔍 Testing instance $instance_id at $INSTANCE_IP:8000"
              
              for attempt in {1..3}; do
                if curl -f -m 10 "http://$INSTANCE_IP:8000/health" 2>/dev/null; then
                  echo "✅ Instance $instance_id is healthy"
                  break
                else
                  if [ $attempt -eq 3 ]; then
                    echo "❌ Instance $instance_id failed health check"
                    all_healthy=false
                  else
                    echo "⚠️ Retrying health check for $instance_id..."
                    sleep 5
                  fi
                fi
              done
            fi
          done
          
          if [ "$all_healthy" = true ]; then
            echo "🎉 All instances are healthy!"
          else
            echo "⚠️ Some instances failed health checks"
          fi

      - name: Deployment Summary
        if: always()
        run: |
          echo ""
          echo "=========================================="
          if [ "${{ job.status }}" == "success" ]; then
            echo "🎉 ✅ DEPLOYMENT SUCCESSFUL!"
            echo "=========================================="
            echo ""
            echo "🌐 Your fashion e-commerce backend is live!"
            echo "🔧 All services configured and running:"
            echo "   • Node.js application with PM2"
            echo "   • Payment processing (Razorpay/Braintree)"
            echo "   • Email service (Brevo)"
            echo "   • SMS service (MSG91)"
            echo "   • Redis caching"
            echo "   • MongoDB database"
            echo "   • Social authentication"
            echo "   • Shipping integration (Shiprocket)"
            echo ""
            echo "💰 Running on cost-optimized AWS infrastructure"
            echo "📈 Auto Scaling Group monitoring traffic"
            
            # Show load balancer URL if available
            ALB_DNS=$(aws elbv2 describe-load-balancers \
              --names fashion-backend-production-alb \
              --query 'LoadBalancers[0].DNSName' --output text 2>/dev/null || echo "")
            
            if [ -n "$ALB_DNS" ] && [ "$ALB_DNS" != "None" ]; then
              echo ""
              echo "🌟 Access your backend at:"
              echo "   http://$ALB_DNS"
              echo "   http://$ALB_DNS/health"
            fi
          else
            echo "❌ 🚨 DEPLOYMENT FAILED!"
            echo "=========================================="
            echo ""
            echo "💡 Common solutions:"
            echo "• Check GitHub Secrets are properly configured"
            echo "• Ensure infrastructure is created (run create-infrastructure.sh)"
            echo "• Verify Auto Scaling Group has running instances"
            echo "• Check security groups allow SSH and HTTP access"
            echo ""
            echo "📖 See troubleshooting guide: docs/HYBRID_DEPLOYMENT_COMPLETE_GUIDE.md"
          fi
          echo "=========================================="
