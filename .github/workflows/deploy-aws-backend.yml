name: Deploy to AWS Backend Infrastructure

on:
  push:
    branches: [main, production]
    paths: ['server/**']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Find Auto Scaling Group instances
      id: get-instances
      run: |
        ASG_NAME="fashion-backend-production-asg"
        echo "üîç Finding instances in Auto Scaling Group: $ASG_NAME"
        
        # Check if ASG exists
        if ! aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $ASG_NAME &>/dev/null; then
          echo "‚ùå Auto Scaling Group '$ASG_NAME' not found!"
          echo "üí° Run the infrastructure script first:"
          echo "   chmod +x aws/scripts/create-infrastructure.sh"
          echo "   ./aws/scripts/create-infrastructure.sh"
          exit 1
        fi
        
        # Get running instances
        INSTANCES=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names $ASG_NAME \
          --query 'AutoScalingGroups[0].Instances[?LifecycleState==`InService`].InstanceId' \
          --output text)
        
        if [ -z "$INSTANCES" ]; then
          echo "‚ùå No running instances found in Auto Scaling Group"
          echo "üí° Wait for instances to launch or check ASG status"
          exit 1
        fi
        
        echo "‚úÖ Found instances: $INSTANCES"
        echo "instances=$INSTANCES" >> $GITHUB_OUTPUT

    - name: Validate required secrets
      run: |
        echo "üîç Validating critical environment variables..."
        
        # Core secrets that are absolutely required
        required_secrets=(
          "DATABASE"
          "SECRET" 
          "CLIENT_URL"
          "RAZORPAY_KEY_ID"
          "RAZORPAY_KEY_SECRET"
          "BREVO_API_KEY"
          "BREVO_SENDER_EMAIL"
          "MSG91_AUTH_KEY"
          "REDIS_URL"
          "EC2_PRIVATE_KEY"
        )
        
        missing_secrets=()
        
        for secret in "${required_secrets[@]}"; do
          if [ -z "${!secret}" ]; then
            missing_secrets+=("$secret")
          fi
        done
        
        if [ ${#missing_secrets[@]} -ne 0 ]; then
          echo "‚ùå Missing required secrets:"
          printf '%s\n' "${missing_secrets[@]}"
          echo ""
          echo "üí° Add missing secrets to GitHub repository:"
          echo "   Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí New repository secret"
          echo ""
          echo "üìñ See complete setup guide: docs/GITHUB_SECRETS_COMPLETE_SETUP.md"
          exit 1
        fi
        
        echo "‚úÖ All critical secrets are configured"
      env:
        DATABASE: ${{ secrets.DATABASE }}
        SECRET: ${{ secrets.SECRET }}
        CLIENT_URL: ${{ secrets.CLIENT_URL }}
        RAZORPAY_KEY_ID: ${{ secrets.RAZORPAY_KEY_ID }}
        RAZORPAY_KEY_SECRET: ${{ secrets.RAZORPAY_KEY_SECRET }}
        BREVO_API_KEY: ${{ secrets.BREVO_API_KEY }}
        BREVO_SENDER_EMAIL: ${{ secrets.BREVO_SENDER_EMAIL }}
        MSG91_AUTH_KEY: ${{ secrets.MSG91_AUTH_KEY }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}

    - name: Deploy to instances
      run: |
        echo "üöÄ Starting deployment to all instances..."
        
        # Create SSH key file
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        
        # Track deployment results
        successful_deployments=0
        failed_deployments=0
        
        for instance_id in ${{ steps.get-instances.outputs.instances }}; do
          echo ""
          echo "üì¶ Deploying to instance: $instance_id"
          
          # Get instance details
          INSTANCE_INFO=$(aws ec2 describe-instances \
            --instance-ids $instance_id \
            --query 'Reservations[0].Instances[0].[PublicIpAddress,PrivateDnsName,State.Name]' \
            --output text)
          
          INSTANCE_IP=$(echo $INSTANCE_INFO | cut -f1)
          INSTANCE_STATE=$(echo $INSTANCE_INFO | cut -f3)
          
          if [ "$INSTANCE_STATE" != "running" ]; then
            echo "‚ö†Ô∏è Instance $instance_id is in state: $INSTANCE_STATE - skipping"
            continue
          fi
          
          if [ "$INSTANCE_IP" == "None" ] || [ -z "$INSTANCE_IP" ]; then
            echo "‚ö†Ô∏è No public IP for instance $instance_id - skipping"
            continue
          fi
          
          echo "üåê Instance IP: $INSTANCE_IP"
          
          # Deploy to this instance
          if ssh -i private_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=30 ec2-user@$INSTANCE_IP << 'DEPLOY_SCRIPT'
            set -e
            echo "üîß Starting deployment on $(hostname)"
            
            # Navigate to application directory
            cd /opt/app
            
            # Stop current application
            echo "‚èπÔ∏è Stopping current application..."
            pm2 delete all || true
            
            # Backup current version if it exists
            if [ -d "current" ]; then
              echo "üì¶ Backing up current version..."
              mv current backup-$(date +%Y%m%d-%H%M%S) || true
            fi
            
            # Clone latest code
            echo "‚¨áÔ∏è Cloning latest code..."
            git clone https://github.com/RahulXTmCoding/desi-otaku.git current
            cd current/server
            
            # Install dependencies
            echo "üìö Installing dependencies..."
            npm install --production --silent
            
            # Verify critical files exist
            if [ ! -f "app.js" ]; then
              echo "‚ùå app.js not found!"
              exit 1
            fi
            
            echo "‚úÖ Application files verified"
            
DEPLOY_SCRIPT
          then
            echo "‚úÖ Basic setup completed for $instance_id, now setting environment..."
            
            # Set up environment variables in a separate SSH session
            ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@$INSTANCE_IP << 'ENV_SCRIPT'
              cd /opt/app/current/server
              
              # Create comprehensive environment file
              cat > .env << 'EOF'
# Core Application Configuration
NODE_ENV=production
PORT=8000
DATABASE=${{ secrets.DATABASE }}
SECRET=${{ secrets.SECRET }}
CLIENT_URL=${{ secrets.CLIENT_URL }}

# Payment Services
RAZORPAY_KEY_ID=${{ secrets.RAZORPAY_KEY_ID }}
RAZORPAY_KEY_SECRET=${{ secrets.RAZORPAY_KEY_SECRET }}
RAZORPAY_WEBHOOK_SECRET=${{ secrets.RAZORPAY_WEBHOOK_SECRET }}
BRAINTREE_MERCHANT_ID=${{ secrets.BRAINTREE_MERCHANT_ID }}
BRAINTREE_PUBLIC_KEY=${{ secrets.BRAINTREE_PUBLIC_KEY }}
BRAINTREE_PRIVATE_KEY=${{ secrets.BRAINTREE_PRIVATE_KEY }}

# Email Service (Brevo)
EMAIL_SERVICE=brevo
BREVO_API_KEY=${{ secrets.BREVO_API_KEY }}
BREVO_SENDER_EMAIL=${{ secrets.BREVO_SENDER_EMAIL }}
BREVO_SENDER_NAME=${{ secrets.BREVO_SENDER_NAME }}

# SMS Service (MSG91)
MSG91_AUTH_KEY=${{ secrets.MSG91_AUTH_KEY }}
MSG91_SENDER_ID=${{ secrets.MSG91_SENDER_ID }}
MSG91_TEMPLATE_ID=${{ secrets.MSG91_TEMPLATE_ID }}
MSG91_ROUTE=${{ secrets.MSG91_ROUTE }}

# Shipping Service (Shiprocket)
SHIPROCKET_EMAIL=${{ secrets.SHIPROCKET_EMAIL }}
SHIPROCKET_PASSWORD=${{ secrets.SHIPROCKET_PASSWORD }}
SHIPROCKET_TEST_MODE=${{ secrets.SHIPROCKET_TEST_MODE }}
PICKUP_PINCODE=${{ secrets.PICKUP_PINCODE }}
PICKUP_NAME=${{ secrets.PICKUP_NAME }}
PICKUP_PHONE=${{ secrets.PICKUP_PHONE }}

# OAuth Services
GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
FACEBOOK_APP_ID=${{ secrets.FACEBOOK_APP_ID }}
FACEBOOK_APP_SECRET=${{ secrets.FACEBOOK_APP_SECRET }}

# Caching (Redis)
REDIS_URL=${{ secrets.REDIS_URL }}
EOF

              # Secure the .env file
              chmod 600 .env
              
              # Create PM2 ecosystem file
              cat > ecosystem.config.js << 'ECOEOF'
module.exports = {
  apps: [{
    name: 'fashion-backend',
    script: './app.js',
    instances: 1,
    exec_mode: 'cluster',
    env: {
      NODE_ENV: 'production',
      PORT: 8000
    },
    error_file: '/var/log/pm2/err.log',
    out_file: '/var/log/pm2/out.log',
    log_file: '/var/log/pm2/combined.log',
    time: true,
    watch: false,
    max_memory_restart: '800M',
    restart_delay: 4000,
    max_restarts: 10,
    min_uptime: '10s'
  }]
};
ECOEOF

              # Start application with PM2
              echo "üöÄ Starting application..."
              pm2 start ecosystem.config.js
              pm2 save
              
              echo "‚úÖ Application started successfully on $(hostname)"
              echo "üìä Application status:"
              pm2 list
              
ENV_SCRIPT
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ Deployment successful for instance $instance_id"
              ((successful_deployments++))
            else
              echo "‚ùå Environment setup failed for instance $instance_id"
              ((failed_deployments++))
            fi
          else
            echo "‚ùå Basic deployment failed for instance $instance_id"
            ((failed_deployments++))
          fi
        done
        
        # Clean up
        rm -f private_key.pem
        
        echo ""
        echo "üìä Deployment Summary:"
        echo "‚úÖ Successful deployments: $successful_deployments"
        echo "‚ùå Failed deployments: $failed_deployments"
        
        if [ $failed_deployments -gt 0 ]; then
          echo "‚ö†Ô∏è Some deployments failed"
          exit 1
        fi
        
        echo "üéâ All deployments completed successfully!"

    - name: Health check and validation
      run: |
        echo ""
        echo "üè• Starting comprehensive health checks..."
        
        # Get Load Balancer URL
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names fashion-backend-production-alb \
          --query 'LoadBalancers[0].DNSName' --output text 2>/dev/null || echo "")
        
        if [ -n "$ALB_DNS" ] && [ "$ALB_DNS" != "None" ]; then
          echo "üåê Testing Load Balancer: http://$ALB_DNS"
          
          # Wait for deployment to settle
          echo "‚è≥ Waiting 45 seconds for services to fully start..."
          sleep 45
          
          # Test load balancer health endpoint
          for attempt in {1..10}; do
            if curl -f -m 10 "http://$ALB_DNS/health" 2>/dev/null; then
              echo "‚úÖ Load Balancer health check passed (attempt $attempt)"
              echo "üåü Your backend is live at: http://$ALB_DNS"
              break
            else
              if [ $attempt -eq 10 ]; then
                echo "‚ùå Load Balancer health check failed after 10 attempts"
                echo "üí° Check individual instances below..."
              else
                echo "‚ö†Ô∏è Health check attempt $attempt failed, retrying in 10 seconds..."
                sleep 10
              fi
            fi
          done
        else
          echo "‚ö†Ô∏è Load Balancer not found, testing individual instances..."
        fi
        
        # Test individual instances
        all_healthy=true
        
        for instance_id in ${{ steps.get-instances.outputs.instances }}; do
          echo ""
          echo "üîç Health checking instance: $instance_id"
          
          INSTANCE_IP=$(aws ec2 describe-instances \
            --instance-ids $instance_id \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          
          if [ "$INSTANCE_IP" == "None" ] || [ -z "$INSTANCE_IP" ]; then
            echo "‚ö†Ô∏è No public IP for instance $instance_id"
            continue
          fi
          
          # Test health endpoint
          echo "üåê Testing: http://$INSTANCE_IP:8000/health"
          
          for attempt in {1..5}; do
            if curl -f -m 10 "http://$INSTANCE_IP:8000/health" 2>/dev/null; then
              echo "‚úÖ Instance $instance_id is healthy (attempt $attempt)"
              break
            else
              if [ $attempt -eq 5 ]; then
                echo "‚ùå Instance $instance_id failed health check after 5 attempts"
                all_healthy=false
              else
                echo "‚ö†Ô∏è Health check attempt $attempt failed, retrying in 10 seconds..."
                sleep 10
              fi
            fi
          done
        done
        
        echo ""
        if [ "$all_healthy" = true ]; then
          echo "üéâ All instances are healthy and responding!"
        else
          echo "‚ö†Ô∏è Some instances failed health checks - check logs above"
        fi

    - name: Deployment notification
      if: always()
      run: |
        echo ""
        echo "========================================"
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ ‚úÖ DEPLOYMENT SUCCESSFUL!"
          echo "========================================"
          echo ""
          echo "üåê Your fashion e-commerce backend is live!"
          echo "üîß All services configured:"
          echo "   ‚Ä¢ Payments (Razorpay/Braintree)"
          echo "   ‚Ä¢ Email (Brevo)"
          echo "   ‚Ä¢ SMS (MSG91)"
          echo "   ‚Ä¢ Caching (Redis)"
          echo "   ‚Ä¢ Database (MongoDB)"
          echo "   ‚Ä¢ OAuth (Google/Facebook)"
          echo "   ‚Ä¢ Shipping (Shiprocket)"
          echo ""
          echo "üìà Auto Scaling Group is monitoring traffic"
          echo "üí∞ Running on cost-optimized spot instances"
          
          # Get ALB URL if available
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names fashion-backend-production-alb \
            --query 'LoadBalancers[0].DNSName' --output text 2>/dev/null || echo "")
          
          if [ -n "$ALB_DNS" ] && [ "$ALB_DNS" != "None" ]; then
            echo ""
            echo "üåü Access your backend at:"
            echo "   http://$ALB_DNS"
            echo "   http://$ALB_DNS/health"
          fi
        else
          echo "‚ùå üö® DEPLOYMENT FAILED!"
          echo "========================================"
          echo ""
          echo "üí° Common issues and solutions:"
          echo "‚Ä¢ Missing GitHub Secrets ‚Üí Check repository settings"
          echo "‚Ä¢ Infrastructure not ready ‚Üí Run create-infrastructure.sh first"
          echo "‚Ä¢ Instance connectivity ‚Üí Check security groups"
          echo "‚Ä¢ Application errors ‚Üí Check PM2 logs on instances"
          echo ""
          echo "üìñ See troubleshooting guide: docs/HYBRID_DEPLOYMENT_COMPLETE_GUIDE.md"
        fi
        echo "========================================"
