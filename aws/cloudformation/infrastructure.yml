AWSTemplateFormatVersion: '2010-09-09'
Description: 'Ultra-cost-effective Fashion E-commerce Backend with Spot Instances'

Parameters:
  ProjectName:
    Type: String
    Default: 'fashion-backend'
    Description: 'Name of the project'
    
  Environment:
    Type: String
    Default: 'production'
    AllowedValues: ['production', 'staging']
    Description: 'Environment name'
    
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: 'EC2 Key Pair for SSH access'
    
  GitHubRepository:
    Type: String
    Description: 'GitHub repository URL (e.g., https://github.com/username/repo.git)'
    
  MongoDBConnectionString:
    Type: String
    NoEcho: true
    Description: 'MongoDB connection string'
    
  JWTSecret:
    Type: String
    NoEcho: true
    Description: 'JWT Secret key'

Resources:
  # VPC and Networking (using default VPC for cost optimization)
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${ProjectName}-${Environment} Security Group'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: 'SSH access'
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: 'Application port from ALB'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-backend-sg'

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${ProjectName}-${Environment} Load Balancer Security Group'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: 'HTTP access'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: 'HTTPS access'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-alb-sg'

  # IAM Role for EC2 instances
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-ec2-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: SpotInstancePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeSpotInstanceRequests
                  - ec2:DescribeInstances
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # Launch Template for Spot Instances
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${ProjectName}-${Environment}-lt'
      LaunchTemplateData:
        ImageId: ami-0dee22c13ea7a9a67  # Amazon Linux 2 ARM64 (ap-south-1)
        InstanceType: t4g.micro
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref SecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${ProjectName}-${Environment}-backend'
              - Key: Environment
                Value: !Ref Environment
              - Key: Project
                Value: !Ref ProjectName
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            
            # Install Node.js 18 (ARM64)
            curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
            yum install -y nodejs git
            
            # Install PM2 globally
            npm install -g pm2
            
            # Create application directory
            mkdir -p /opt/app
            cd /opt/app
            
            # Clone repository
            git clone ${GitHubRepository} .
            cd server
            
            # Install dependencies
            npm install --production
            
            # Create environment file
            cat > .env << EOF
            NODE_ENV=production
            PORT=3000
            DATABASE=${MongoDBConnectionString}
            JWT_SECRET=${JWTSecret}
            EOF
            
            # Create PM2 ecosystem file
            cat > ecosystem.config.js << 'EOF'
            module.exports = {
              apps: [{
                name: 'fashion-backend',
                script: './app.js',
                instances: 1,
                exec_mode: 'cluster',
                env: {
                  NODE_ENV: 'production',
                  PORT: 3000
                },
                error_file: '/var/log/pm2/err.log',
                out_file: '/var/log/pm2/out.log',
                log_file: '/var/log/pm2/combined.log',
                time: true,
                watch: false,
                max_memory_restart: '800M',
                restart_delay: 4000
              }]
            };
            EOF
            
            # Create log directory
            mkdir -p /var/log/pm2
            
            # Start application with PM2
            pm2 start ecosystem.config.js
            pm2 save
            pm2 startup systemd -u root --hp /root
            
            # Configure PM2 to start on boot
            env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u root --hp /root
            
            echo "âœ… Application deployment completed"

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-alb'
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - subnet-0a1b2c3d4e5f6g7h8  # Replace with your subnet IDs
        - subnet-1a2b3c4d5e6f7g8h9  # Replace with your subnet IDs
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-alb'

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-tg'
      Port: 3000
      Protocol: HTTP
      VpcId: vpc-12345678  # Replace with your VPC ID
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-tg'

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Auto Scaling Group with Spot Fleet
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${ProjectName}-${Environment}-asg'
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 6
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      DefaultCooldown: 300
      AvailabilityZones:
        - !Sub '${AWS::Region}a'
        - !Sub '${AWS::Region}b'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-asg-instance'
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: t4g.micro
            - InstanceType: t3.micro
            - InstanceType: t3a.micro
        InstancesDistribution:
          OnDemandBaseCapacity: 0
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: diversified
          SpotInstancePools: 3
          SpotMaxPrice: '0.0056'  # Max price for t4g.micro on-demand

  # Scaling Policies
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 70.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

Outputs:
  LoadBalancerDNS:
    Description: 'Application Load Balancer DNS Name'
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${ProjectName}-${Environment}-alb-dns'

  LoadBalancerURL:
    Description: 'Application Load Balancer URL'
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-alb-url'

  TargetGroupArn:
    Description: 'Target Group ARN'
    Value: !Ref TargetGroup
    Export:
      Name: !Sub '${ProjectName}-${Environment}-tg-arn'

  AutoScalingGroupName:
    Description: 'Auto Scaling Group Name'
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub '${ProjectName}-${Environment}-asg-name'
